#!/usr/bin/env python

import argparse
from datetime import datetime
import json
import logging
import sys
import timestring

from blackduck.HubRestApi import HubInstance

#
# Example usage:
#	To get all the vulnerabilities (first time) and save the last run date/time,
#		python examples/get_bom_component_vulnerability_info.py struts2-showcase 2.6-SNAPSHOT -s > vulnerabilities.json
#
#	Having saved the last run date/time, use it to view any newly published vulnerabilities that have come out since the last run,
#		python examples/get_bom_component_vulnerability_info.py struts2-showcase 2.6-SNAPSHOT -n `cat .last_run` > vulnerabilities_since.json
#
#	Having saved the last run date/time, use it to view any newly published vulnerabilities that have come out since the last run
#	and update the last run date/time,
#		python examples/get_bom_component_vulnerability_info.py struts2-showcase 2.6-SNAPSHOT -s -n `cat .last_run` > vulnerabilities_since.json
#
#	Use --newer_than (aka -n) to specify your own date (or date/time),
#		python examples/get_bom_component_vulnerability_info.py struts2-showcase 2.6-SNAPSHOT -n "2017" > vulnerabilities_since_2017.json
#		python examples/get_bom_component_vulnerability_info.py struts2-showcase 2.6-SNAPSHOT -n "July 1 2018" > vulnerabilities_since_July_1_2018.json
#		python examples/get_bom_component_vulnerability_info.py struts2-showcase 2.6-SNAPSHOT -n "July 1 2018 5:30 pm" > vulnerabilities_since_July_1_2018_1730.json

parser = argparse.ArgumentParser("Retreive BOM component vulnerability information for the given project and version")
parser.add_argument("project_name")
parser.add_argument("version")
parser.add_argument("-n", "--newer_than", 
	default=None, 
	type=str,
	help="Set this option to see all vulnerabilities published since the given date/time.")
parser.add_argument("-s", "--save_dt", 
	action='store_true', 
	help="If set, the date/time will be saved to a file named '.last_run' in the current directory which can be used later with the -n option to see vulnerabilities published since the last run.")
args = parser.parse_args()

if args.newer_than:
	newer_than = timestring.Date(args.newer_than).date
else:
	newer_than = None

if args.save_dt:
	with open(".last_run", "w") as f:
		f.write(datetime.now().isoformat())

logging.basicConfig(format='%(asctime)s:%(levelname)s:%(message)s', stream=sys.stderr, level=logging.DEBUG)
logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

hub = HubInstance()

project = hub.get_project_by_name(args.project_name)

version = hub.get_version_by_name(project, args.version)

vulnerable_bom_components_info = hub.get_vulnerable_bom_components(version)

vulnerable_bom_components = vulnerable_bom_components_info.get('items', [])

if vulnerable_bom_components:
	vulnerable_bom_components = sorted(
		vulnerable_bom_components, 
		key = lambda k: k['vulnerabilityWithRemediation']['vulnerabilityPublishedDate'])
	if newer_than:
		vulnerable_bom_components = [v for v in vulnerable_bom_components 
			if timestring.Date(v['vulnerabilityWithRemediation']['vulnerabilityPublishedDate']) > newer_than ]
else:
	logging.debug("Did not find any vulnerable BOM components in project {}, version {}".format(args.project_name, args.version))

print(json.dumps(vulnerable_bom_components))

